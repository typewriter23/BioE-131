%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Oct  9 10:14:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGACCCUGAUGAGCUUGAGUUUAGCUCGUCACUGUCCAGGUCAAUCAGGCGAAACGGUGAAACCGUAGGUUGCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 243.64122009]
[92.50000000 228.64122009]
[92.50000000 213.64122009]
[92.50000000 198.64122009]
[92.50000000 183.64122009]
[92.50000000 168.64122009]
[92.50000000 153.64122009]
[92.50000000 138.64122009]
[69.79087067 125.23494720]
[60.64085770 100.50217438]
[45.88039780 97.83220673]
[31.11993217 95.16223907]
[16.35947037 92.49227142]
[1.59900689 89.82230377]
[-13.16145611 87.15233612]
[-27.92191887 84.48236084]
[-42.68238068 81.81239319]
[-57.44284439 79.14242554]
[-69.34973145 89.27948761]
[-84.98720551 89.33963013]
[-96.97171783 79.29446411]
[-99.64455414 63.88699722]
[-91.74368286 50.39217377]
[-76.99964905 45.18183517]
[-62.37414551 50.71614075]
[-54.77287674 64.38196564]
[-40.01241302 67.05193329]
[-25.25195122 69.72190094]
[-10.49148750 72.39186859]
[4.26897526 75.06183624]
[19.02943802 77.73180389]
[33.78990173 80.40177155]
[48.55036545 83.07174683]
[63.31082916 85.74171448]
[66.60462952 79.16389465]
[71.06485748 73.31382751]
[76.53572083 68.39585876]
[82.82614899 64.58174133]
[89.71640778 62.00471115]
[96.96585846 60.75476837]
[104.32128143 60.87557602]
[111.52577209 62.36290741]
[118.32769775 65.16481781]
[127.71331787 53.46396255]
[137.09893799 41.76309967]
[136.78430176 25.72313309]
[149.22021484 15.58766937]
[164.86691284 19.13176918]
[171.72157288 33.63670349]
[164.52590942 47.97552872]
[148.79980469 51.14872360]
[139.41416931 62.84958267]
[130.02854919 74.55043793]
[134.53143311 81.10623169]
[137.62455750 88.43336487]
[139.18165588 96.23270416]
[139.13914490 104.18584442]
[153.47691345 108.59360504]
[167.81469727 113.00135803]
[182.15246582 117.40911102]
[196.49023438 121.81686401]
[213.40681458 120.69179535]
[219.17088318 136.63581848]
[205.44561768 146.58837891]
[192.08247375 136.15463257]
[177.74470520 131.74688721]
[163.40693665 127.33912659]
[149.06916809 122.93137360]
[134.73139954 118.52362061]
[123.38914490 131.65979004]
[107.50000000 138.64122009]
[107.50000000 153.64122009]
[107.50000000 168.64122009]
[107.50000000 183.64122009]
[107.50000000 198.64122009]
[107.50000000 213.64122009]
[107.50000000 228.64122009]
[107.50000000 243.64122009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[43 53]
[44 52]
[45 51]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
