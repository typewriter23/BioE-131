%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Oct  9 10:14:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGACCCUGAUGAGCUUGAGUUUxxxxxxxxxxxxxxxxxxxxxAUCAGGCGAAACGGUGAAACCGUAGGUUGCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 242.95614624]
[92.50000000 227.95614624]
[92.50000000 212.95614624]
[92.50000000 197.95614624]
[92.50000000 182.95614624]
[92.50000000 167.95614624]
[92.50000000 152.95614624]
[92.50000000 137.95614624]
[81.81526947 134.15017700]
[72.69337463 127.40926361]
[65.91828156 118.31272125]
[62.07225418 107.64234161]
[61.48582840 96.31516266]
[64.20940399 85.30466461]
[70.00891876 75.55712128]
[78.38593292 67.91025543]
[72.57686615 54.08076859]
[66.76779938 40.25128174]
[60.95872879 26.42179489]
[55.14966202 12.59230709]
[49.34059525 -1.23718107]
[34.50255585 1.36673701]
[19.45713997 0.60307461]
[4.95901680 -3.48986316]
[-8.26459503 -10.70677662]
[-19.55040359 -20.68566704]
[-28.33231735 -32.92599869]
[-34.16983795 -46.81380081]
[-36.77016068 -61.65246964]
[-36.00285339 -76.69770050]
[-31.90640450 -91.19483185]
[-24.68628693 -104.41669464]
[-14.70466137 -115.70008850]
[-2.46220183 -124.47903442]
[11.42701530 -130.31318665]
[26.26631355 -132.90991211]
[41.31135559 -132.13896179]
[55.80749512 -128.03900146]
[69.02761078 -120.81568146]
[80.30857849 -110.83132172]
[89.08456421 -98.58673859]
[94.91535187 -84.69610596]
[97.50848389 -69.85617828]
[96.73388672 -54.81132126]
[92.63040924 -40.31617737]
[85.40388489 -27.09781456]
[75.41679382 -15.81926250]
[63.17008209 -7.04624891]
[68.97914886 6.78323936]
[74.78821564 20.61272621]
[80.59728241 34.44221497]
[86.40634918 48.27170181]
[92.21542358 62.10118866]
[110.19120026 62.67629623]
[125.96482849 71.31642914]
[136.12788391 86.15460205]
[138.48431396 103.98454285]
[152.82209778 108.39229584]
[167.15986633 112.80004883]
[181.49763489 117.20780182]
[195.83540344 121.61555481]
[212.75198364 120.49048615]
[218.51605225 136.43450928]
[204.79078674 146.38706970]
[191.42765808 135.95332336]
[177.08987427 131.54557800]
[162.75210571 127.13781738]
[148.41433716 122.73006439]
[134.07656860 118.32231140]
[122.98966217 131.11904907]
[107.50000000 137.95614624]
[107.50000000 152.95614624]
[107.50000000 167.95614624]
[107.50000000 182.95614624]
[107.50000000 197.95614624]
[107.50000000 212.95614624]
[107.50000000 227.95614624]
[107.50000000 242.95614624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
