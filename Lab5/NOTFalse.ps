%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Oct  9 10:14:29 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGUACAUACAGCUGUAUGAGUCCCAAAUAGGACGAACGCGACACACACCACUAAACCGUGCAGUGUUUUGCGUCCUGUAUUCCACUGC\
) } def
/len { sequence length } bind def

/coor [
[125.29623413 188.38160706]
[136.46981812 177.98384094]
[131.97937012 163.67175293]
[127.48892212 149.35966492]
[122.99847412 135.04757690]
[118.50803375 120.73548126]
[106.41121674 125.43875122]
[94.25639343 123.99661255]
[84.81521606 117.42719269]
[71.82482910 124.92719269]
[58.83445358 132.42720032]
[45.84407043 139.92720032]
[32.85369110 147.42720032]
[25.12717438 161.89208984]
[8.73025894 162.16265869]
[0.53068489 147.96058655]
[8.96347141 133.89572144]
[25.35368919 134.43681335]
[38.34407043 126.93681335]
[51.33445358 119.43681335]
[64.32482910 111.93681335]
[77.31521606 104.43681335]
[76.88869476 100.39039612]
[77.17830658 96.33187866]
[63.94203186 89.27489471]
[50.70575333 82.21791077]
[37.46947861 75.16092682]
[22.42547798 80.00382233]
[8.40165043 72.71630859]
[3.71808481 57.62194824]
[11.15345669 43.67595291]
[26.29649353 39.15223694]
[40.16309738 46.73463821]
[44.52645874 61.92465591]
[57.76273727 68.98163605]
[70.99901581 76.03862000]
[84.23529053 83.09560394]
[97.81797791 75.42226410]
[114.23249054 77.96207428]
[126.24540710 90.85198212]
[137.11729431 80.51747894]
[147.98918152 70.18297577]
[158.86108398 59.84847641]
[169.73297119 49.51396942]
[180.60485840 39.17946625]
[185.27638245 24.06366539]
[199.83175659 20.90293503]
[210.70365906 10.56843185]
[221.57554626 0.23392783]
[232.44743347 -10.10057640]
[233.01066589 -25.66722488]
[244.18351746 -35.99300766]
[259.02047729 -35.36013031]
[269.89236450 -45.69463348]
[280.76425171 -56.02913666]
[280.91403198 -71.83271790]
[292.25308228 -82.84184265]
[308.05419922 -82.52500916]
[318.94284058 -71.07017517]
[318.45895386 -55.27329254]
[306.88964844 -44.50637817]
[291.09875488 -45.15724564]
[280.22686768 -34.82273865]
[269.35498047 -24.48823738]
[269.23556519 -9.63827610]
[258.35714722 0.99725467]
[242.78193665 0.77131587]
[231.91004944 11.10581970]
[221.03816223 21.44032288]
[210.16625977 31.77482796]
[206.27236938 46.15143585]
[190.93936157 50.05135727]
[180.06747437 60.38586426]
[169.19558716 70.72036743]
[158.32368469 81.05487061]
[147.45179749 91.38937378]
[136.57991028 101.72387695]
[132.82011414 116.24503326]
[137.31056213 130.55712891]
[141.80101013 144.86921692]
[146.29145813 159.18130493]
[150.78190613 173.49339294]
[165.89270020 175.64439392]
[178.56898499 184.14582825]
[186.29388428 197.30973816]
[187.53361511 212.52243042]
[182.04202271 226.76339722]
[170.90946960 237.20509338]
[156.34632874 241.77430725]
[141.24412537 239.56381226]
[128.60140991 231.01252747]
[120.92841339 217.81829834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[5 79]
[6 78]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[24 37]
[25 36]
[26 35]
[27 34]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[47 70]
[48 69]
[49 68]
[50 67]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
