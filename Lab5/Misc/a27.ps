%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Oct  9 03:19:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGACCCUGAUGAGCUUGGUUGAGUAUUUACAGCUCCAUACAUGAGGUGUUCUCCCUACGCAAGUUCGAUCAGGCGAAACGGUGAAAGCCGUAGGGUUGCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.00407410]
[92.50000000 232.00407410]
[92.50000000 217.00407410]
[92.50000000 202.00407410]
[92.50000000 187.00407410]
[92.50000000 172.00407410]
[92.50000000 157.00407410]
[92.50000000 142.00407410]
[92.50000000 127.00408173]
[92.50000000 112.00408173]
[87.86474609 97.73822784]
[79.04796600 85.60297394]
[70.23118591 73.46772003]
[61.23386002 61.46571732]
[52.05799484 49.59965134]
[42.88212967 37.73358536]
[33.70626450 25.86752129]
[24.53040123 14.00145626]
[15.35453701 2.13539052]
[6.17867231 -9.73067474]
[-3.17367482 -21.45814705]
[-12.70041180 -33.04440308]
[-31.81928825 -39.07852936]
[-34.54464722 -58.12298584]
[-44.74723816 -69.11876678]
[-54.94983292 -80.11454010]
[-63.56667328 -78.81252289]
[-71.87763977 -81.09774017]
[-78.47008514 -86.50159454]
[-82.25616455 -94.03239441]
[-82.65204620 -102.35671997]
[-79.66668701 -110.03530121]
[-88.48346710 -122.17055511]
[-97.30023956 -134.30581665]
[-111.67138672 -140.92251587]
[-112.89268494 -155.76696777]
[-121.70946503 -167.90222168]
[-130.52624512 -180.03747559]
[-146.13731384 -180.94773865]
[-157.47543335 -191.71717834]
[-159.18710327 -207.26080322]
[-150.46412659 -220.23937988]
[-135.42521667 -224.52482605]
[-121.17127991 -218.09368896]
[-114.43260956 -203.98254395]
[-118.39098358 -188.85424805]
[-109.57421112 -176.71899414]
[-100.75743103 -164.58374023]
[-87.01692200 -158.83503723]
[-85.16498566 -143.12258911]
[-76.34821320 -130.98733521]
[-67.53143311 -118.85208130]
[-46.92839432 -112.43657684]
[-43.95405197 -90.31713104]
[-33.75146103 -79.32135773]
[-23.54887009 -68.32557678]
[-13.14325523 -68.84568024]
[-4.02523804 -63.36145782]
[0.58047742 -53.52437210]
[-1.11415696 -42.57113647]
[8.41257954 -30.98488426]
[15.20285511 -27.76477242]
[18.04473686 -18.90653992]
[27.22060204 -7.04047394]
[36.39646530 4.82559156]
[45.57233047 16.69165611]
[54.74819565 28.55772209]
[63.92406082 40.42378616]
[73.09992218 52.28985214]
[79.79083252 55.71165848]
[82.36643982 64.65093994]
[91.18321991 76.78619385]
[100.00000000 88.92145538]
[92.24536133 76.08145142]
[93.55027771 61.13832092]
[103.41310120 49.83678436]
[118.04216766 46.52159119]
[131.81349182 52.46723557]
[139.43283081 65.38797760]
[137.97102356 80.31658173]
[127.99037933 91.51369476]
[140.98075867 99.01369476]
[153.97114563 106.51369476]
[166.96151733 114.01369476]
[179.95190430 121.51369476]
[196.34211731 120.97261047]
[204.77490234 135.03747559]
[196.57533264 149.23954773]
[180.17842102 148.96896362]
[172.45190430 134.50407410]
[159.46151733 127.00408173]
[146.47114563 119.50408173]
[133.48075867 112.00408173]
[120.49037933 104.50408173]
[107.50000000 112.00408173]
[107.50000000 127.00408173]
[107.50000000 142.00407410]
[107.50000000 157.00407410]
[107.50000000 172.00407410]
[107.50000000 187.00407410]
[107.50000000 202.00407410]
[107.50000000 217.00407410]
[107.50000000 232.00407410]
[107.50000000 247.00407410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[10 95]
[11 73]
[12 72]
[13 71]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 61]
[22 60]
[24 56]
[25 55]
[26 54]
[32 52]
[33 51]
[34 50]
[36 48]
[37 47]
[38 46]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
