%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Oct  9 03:41:17 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGACCCUGAUGAGCUUGGUUGAGxxxxxxxxxxxxxxxxxxxxAGGUGUUCUCCCUACGCAAGUUCGAUCAGGCGAAACGGUGAAAGCCGUAGGGUUGCCC\
) } def
/len { sequence length } bind def

/coor [
[98.45676422 273.30780029]
[98.45676422 258.30780029]
[98.45676422 243.30780029]
[98.45676422 228.30780029]
[98.45676422 213.30780029]
[98.45676422 198.30780029]
[98.45676422 183.30780029]
[98.45676422 168.30780029]
[98.45676422 153.30780029]
[98.45676422 138.30780029]
[83.47280121 133.49406433]
[72.05670166 123.26502991]
[65.96897888 109.64494324]
[65.96356964 95.13594818]
[71.70871735 82.26020050]
[81.90149689 73.12142944]
[76.63087463 59.07790756]
[71.36025238 45.03438568]
[66.08963013 30.99086189]
[60.81900406 16.94734001]
[55.54838181 2.90381598]
[50.27775955 -11.13970661]
[45.00713730 -25.18322945]
[39.73651505 -39.22675323]
[34.46589279 -53.27027512]
[29.19527054 -67.31379700]
[22.21139526 -66.44355774]
[15.17925453 -66.60914612]
[8.25156403 -67.80587006]
[1.57860827 -70.00662231]
[-4.69502354 -73.16255188]
[-10.43356514 -77.20410919]
[-15.51301575 -82.04258728]
[-19.82381630 -87.57209778]
[-23.27321434 -93.67185211]
[-25.78725815 -100.20879364]
[-27.31238174 -107.04055023]
[-27.81654930 -114.01849365]
[-27.28992271 -120.99095917]
[-25.74505424 -127.80660248]
[-23.21658516 -134.31762695]
[-19.76047707 -140.38301086]
[-15.45276833 -145.87156677]
[-10.38790226 -150.66474915]
[-4.67665815 -154.65928650]
[1.55627406 -157.76933289]
[8.17501354 -159.92829895]
[15.03544998 -161.09039307]
[21.98838615 -161.23143005]
[25.10706139 -175.90365601]
[28.22573662 -190.57586670]
[31.34441185 -205.24807739]
[21.57502365 -217.45845032]
[21.99158859 -233.09048462]
[32.39741898 -244.76321411]
[47.87919998 -246.96513367]
[61.12690735 -238.65657043]
[65.88538361 -223.76055908]
[59.90781021 -209.31056213]
[46.01662445 -202.12940979]
[42.89794922 -187.45718384]
[39.77927399 -172.78497314]
[36.66059875 -158.11276245]
[57.66188049 -142.29071045]
[66.98256683 -117.61566162]
[61.65347672 -91.69870758]
[43.23879242 -72.58441925]
[48.50941467 -58.54089737]
[53.78003693 -44.49737549]
[59.05065918 -30.45385170]
[64.32128143 -16.41032982]
[69.59190369 -2.36680627]
[74.86252594 11.67671680]
[80.13314819 25.72023964]
[85.40377045 39.76376343]
[90.67439270 53.80728531]
[95.94501495 67.85080719]
[113.80047607 69.04972076]
[129.06355286 79.83951569]
[136.78530884 97.73246765]
[133.94714355 117.81742096]
[146.93753052 125.31742096]
[159.92790222 132.81741333]
[172.91828918 140.31741333]
[185.90867615 147.81741333]
[202.29888916 147.27633667]
[210.73167419 161.34118652]
[202.53210449 175.54327393]
[186.13519287 175.27268982]
[178.40867615 160.80780029]
[165.41828918 153.30780029]
[152.42790222 145.80780029]
[139.43753052 138.30780029]
[126.44714355 130.80780029]
[113.45676422 138.30780029]
[113.45676422 153.30780029]
[113.45676422 168.30780029]
[113.45676422 183.30780029]
[113.45676422 198.30780029]
[113.45676422 213.30780029]
[113.45676422 228.30780029]
[113.45676422 243.30780029]
[113.45676422 258.30780029]
[113.45676422 273.30780029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[10 95]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[24 69]
[25 68]
[26 67]
[49 63]
[50 62]
[51 61]
[52 60]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
